


ARM Macro Assembler    Page 1 


    1 00000000         ; INPUT:  R10 start of array 
    2 00000000         ;   R11 length of array
    3 00000000         ; OUTPUT: R0 or R1
    4 00000000         
    5 00000000                 AREA             appcode, CODE, READONLY
    6 00000000                 EXPORT           __main
    7 00000000                 ENTRY
    8 00000000         
    9 00000000         
   10 00000000         __main  FUNCTION
   11 00000000         
   12 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; CLIENT
   13 00000000         ;; DATA: 0 to 100
   14 00000000 F04F 0000       MOV              r0, #0      ; counter
   15 00000004         
   16 00000004         ;;;;;;;;;; ENCRYPTION
   17 00000004         
   18 00000004         ;; init
   19 00000004 F04F 3111       MOV              r1, #0x11111111 ; init
   20 00000008 F04F 3211       MOV              r2, #0x11111111 ; init
   21 0000000C         
   22 0000000C         ;; loop
   23 0000000C 4688    loop    MOV              r8, r1      ;
   24 0000000E 4607            MOV              r7, r0      ; in
   25 00000010 F000 F812       BL               e_proc
   26 00000014 4641            MOV              r1, r8      ;
   27 00000016         
   28 00000016 4637            MOV              r7, r6      ;
   29 00000018 F000 F817       BL               e_hamm
   30 0000001C         
   31 0000001C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; SERVER
   32 0000001C         
   33 0000001C         ;;;;;;;;;; DECRYPTION
   34 0000001C 4635            MOV              r5, r6      ;
   35 0000001E F000 F832       BL               d_hamm
   36 00000022         
   37 00000022 4637            MOV              r7, r6      ;
   38 00000024 4690            MOV              r8, r2      ;
   39 00000026 F000 F80B       BL               d_proc
   40 0000002A 4642            MOV              r2, r8      ;
   41 0000002C         
   42 0000002C B440            PUSH             {R6}
   43 0000002E         
   44 0000002E F100 0001       ADD              r0, r0, #1  ;
   45 00000032 2807            CMP              r0, #7      ;
   46 00000034 DBEA            BLT              loop        ;
   47 00000036         
   48 00000036 E7FE    stop    B                stop        ; stop program
   49 00000038                 ENDFUNC
   50 00000038         
   51 00000038         
   52 00000038         ; R8 = IV
   53 00000038         ; R7 = Input
   54 00000038         ; R6 = Output
   55 00000038 EA87 0608 
                       e_proc  EOR              r6, r7, r8
   56 0000003C         ;ROR r6, #8   ; CBC
   57 0000003C 46B0            MOV              r8, r6      ; update IV
   58 0000003E 4770            BX               lr



ARM Macro Assembler    Page 2 


   59 00000040         
   60 00000040         ; R8 = IV
   61 00000040         ; R7 = Input
   62 00000040         ; R6 = Output
   63 00000040 4646    d_proc  MOV              r6, r8      ; update IV
   64 00000042 46B8            MOV              r8, r7
   65 00000044         ;ROR r7, #24
   66 00000044 EA86 0607       EOR              r6, r6, r7  ; CBC 
   67 00000048 4770            BX               lr
   68 0000004A         
   69 0000004A         ; R7 = Input
   70 0000004A         ; R6 = Output
   71 0000004A         
   72 0000004A EA4F 0897 
                       e_hamm  MOV              R8, R7 , LSR #2 ;Load data
   73 0000004E F008 0801       AND              R8, R8,#1
   74 00000052 EA4F 0957       MOV              R9, R7 , LSR #1 ;Load data
   75 00000056 F009 0901       AND              R9, R9,#1
   76 0000005A 46BA            MOV              R10, R7
   77 0000005C F00A 0A01       AND              R10, R10,#1
   78 00000060         
   79 00000060 EA88 0309       EOR              R3, R8, R9  ;C1
   80 00000064 EA88 040A       EOR              R4, R8, R10 ;C2
   81 00000068 EA89 050A       EOR              R5, R9, R10 ;C3
   82 0000006C         
   83 0000006C EA4F 1643       MOV              R6, R3, LSL #5 
                                                            ; R8 = R9 * 2 ^ 3
   84 00000070 EB06 1604       ADD              R6, R6, R4, LSL #4 ; R8 = R8 + 
                                                            R9 * 2^2
   85 00000074 EB06 06C8       ADD              R6, R6, R8, LSL #3 ; R8 = R8 + 
                                                            R9 * 2^2
   86 00000078 EB06 0685       ADD              R6, R6, R5, LSL #2 ; R8 = R8 + 
                                                            R9 * 2^2
   87 0000007C EB06 0649       ADD              R6, R6, R9, LSL #1 ; R8 = R8 + 
                                                            R9 * 2^2
   88 00000080 EB06 060A       ADD              R6, R6, R10, LSL #0 ; R8 = R8 +
                                                             R9 * 2^2
   89 00000084 4770            BX               lr
   90 00000086         
   91 00000086         
   92 00000086         
   93 00000086         ; R5 = Inp
   94 00000086         ; R6 = Output
   95 00000086         d_hamm                               ; const
   96 00000086 F04F 0800       MOV              r8, #0      ;
   97 0000008A         
   98 0000008A         ; Parity 1
   99 0000008A 462E            MOV              r6, r5      ;
  100 0000008C 462F            MOV              r7, r5      ;
  101 0000008E EA4F 06F6       ROR              r6, #3      ;
  102 00000092 EA4F 0777       ROR              r7, #1      ;
  103 00000096 F006 0601       AND              r6, #1      ;
  104 0000009A F007 0701       AND              r7, #1      ;
  105 0000009E EA86 0607       EOR              r6, r6, r7  ;
  106 000000A2 462F            MOV              r7, r5      ;
  107 000000A4 EA4F 1777       ROR              r7, #5      ;
  108 000000A8 F007 0701       AND              r7, #1      ;
  109 000000AC EA86 0607       EOR              r6, r6, r7  ;
  110 000000B0 44B0            ADD              r8, r8, r6  ;



ARM Macro Assembler    Page 3 


  111 000000B2         
  112 000000B2         ; Parity 2
  113 000000B2 462E            MOV              r6, r5      ;
  114 000000B4 462F            MOV              r7, r5      ;
  115 000000B6 EA4F 06F6       ROR              r6, #3      ;
  116 000000BA F006 0601       AND              r6, #1      ;
  117 000000BE F007 0701       AND              r7, #1      ;
  118 000000C2 EA86 0607       EOR              r6, r6, r7  ;
  119 000000C6 462F            MOV              r7, r5      ;
  120 000000C8 EA4F 1737       ROR              r7, #4      ;
  121 000000CC F007 0701       AND              r7, #1      ;
  122 000000D0 EA86 0607       EOR              r6, r6, r7  ;
  123 000000D4 44B0            ADD              r8, r8, r6  ;
  124 000000D6 44B0            ADD              r8, r8, r6  ;
  125 000000D8         
  126 000000D8         ; Parity 3
  127 000000D8 462E            MOV              r6, r5      ;
  128 000000DA 462F            MOV              r7, r5      ;
  129 000000DC EA4F 0676       ROR              r6, #1      ;
  130 000000E0 F006 0601       AND              r6, #1      ;
  131 000000E4 F007 0701       AND              r7, #1      ;
  132 000000E8 EA86 0607       EOR              r6, r6, r7  ;
  133 000000EC 462F            MOV              r7, r5      ;
  134 000000EE EA4F 07B7       ROR              r7, #2      ;
  135 000000F2 F007 0701       AND              r7, #1      ;
  136 000000F6 EA86 0607       EOR              r6, r6, r7  ;
  137 000000FA 44B0            ADD              r8, r8, r6  ;
  138 000000FC 44B0            ADD              r8, r8, r6  ;
  139 000000FE 44B0            ADD              r8, r8, r6  ;
  140 00000100 44B0            ADD              r8, r8, r6  ;
  141 00000102         
  142 00000102         ; check if any errors
  143 00000102         
  144 00000102 462F            MOV              r7, r5      ;
  145 00000104         
  146 00000104 F1B8 0F00       CMP              r8, #0      ;
  147 00000108 D009            BEQ              done
  148 0000010A         
  149 0000010A F04F 0606       MOV              r6, #6      ;
  150 0000010E EBA6 0808       SUB              r8, r6 , r8
  151 00000112 F04F 0601       MOV              r6, #1      ;
  152 00000116 FA06 F608       LSL              r6, r8      ;
  153 0000011A EA87 0706       EOR              r7, r7, r6  ;
  154 0000011E         
  155 0000011E 463E    done    MOV              r6, r7      ;
  156 00000120 F006 0603       AND              r6, #3      ;
  157 00000124 EA4F 0757       LSR              r7, #1      ;
  158 00000128 F007 0704       AND              r7, #4      ;
  159 0000012C EA46 0607       ORR              r6, r7      ;
  160 00000130         
  161 00000130 4770            BX               lr
  162 00000132         
  163 00000132                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\final.d -o.\objects\final.o -I.\RTE\_Target_1 -ID:\Ke
il_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.
3.0\Device\ARM\ARMCM4\Include --predefine="__EVAL SETA 1" --predefine="__UVISIO
N_VERSION SETA 525" --predefine="_RTE_ SETA 1" --predefine="ARMCM4_FP SETA 1" -
-list=.\listings\final.lst final.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

__main 00000000

Symbol: __main
   Definitions
      At line 10 in file final.s
   Uses
      At line 6 in file final.s
Comment: __main used once
appcode 00000000

Symbol: appcode
   Definitions
      At line 5 in file final.s
   Uses
      None
Comment: appcode unused
d_hamm 00000086

Symbol: d_hamm
   Definitions
      At line 95 in file final.s
   Uses
      At line 35 in file final.s
Comment: d_hamm used once
d_proc 00000040

Symbol: d_proc
   Definitions
      At line 63 in file final.s
   Uses
      At line 39 in file final.s
Comment: d_proc used once
done 0000011E

Symbol: done
   Definitions
      At line 155 in file final.s
   Uses
      At line 147 in file final.s
Comment: done used once
e_hamm 0000004A

Symbol: e_hamm
   Definitions
      At line 72 in file final.s
   Uses
      At line 29 in file final.s
Comment: e_hamm used once
e_proc 00000038

Symbol: e_proc
   Definitions
      At line 55 in file final.s
   Uses
      At line 25 in file final.s
Comment: e_proc used once
loop 0000000C

Symbol: loop



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 23 in file final.s
   Uses
      At line 46 in file final.s
Comment: loop used once
stop 00000036

Symbol: stop
   Definitions
      At line 48 in file final.s
   Uses
      At line 48 in file final.s
Comment: stop used once
9 symbols
344 symbols in table
