


ARM Macro Assembler    Page 1 


    1 00000000                 PRESERVE8        {TRUE}
    2 00000000                 AREA             appcode, CODE, READONLY
    3 00000000                 IMPORT           printMsg
    4 00000000                 EXPORT           __main
    5 00000000                 ENTRY
    6 00000000         
    7 00000000         
    8 00000000         __main  FUNCTION
    9 00000000         
   10 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; CLIENT
   11 00000000         ;; DATA: 0 to 1000
   12 00000000 F04F 0000       MOV              r0, #0      ; counter - data so
                                                            urce
   13 00000004         
   14 00000004         ;;;;;;;;;; ENCRYPTION
   15 00000004         
   16 00000004         ;; init
   17 00000004 F04F 3111       MOV              r1, #0x11111111 ; init IV for c
                                                            lient 
   18 00000008 F04F 3211       MOV              r2, #0x11111111 ; init IV for s
                                                            erver
   19 0000000C         
   20 0000000C         ;; loop
   21 0000000C 4688    loop    MOV              r8, r1      ;
   22 0000000E 4607            MOV              r7, r0      ; in
   23 00000010 F000 F83A       BL               e_proc      ; Call Encryption f
                                                            unction
   24 00000014 4641            MOV              r1, r8      ;
   25 00000016         
   26 00000016 F04F 0B00       MOV              r11, #0     ;
   27 0000001A F04F 0C00       MOV              r12, #0     ;
   28 0000001E B440            PUSH             {r6}
   29 00000020         
   30 00000020 BC40    loop2   POP              {r6}
   31 00000022 4637            MOV              r7, r6      ;
   32 00000024 EA4F 06D6       LSR              r6, #3      ;
   33 00000028 B440            PUSH             {r6}
   34 0000002A F007 0707       AND              r7, #7      ;
   35 0000002E F000 F838       BL               e_hamm      ; Call Hamming enco
                                                            ding function
   36 00000032         
   37 00000032         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; SERVER
   38 00000032         
   39 00000032         ;;;;;;;;;; DECRYPTION
   40 00000032 4635            MOV              r5, r6      ;
   41 00000034 F000 F853       BL               d_hamm      ; Call Hamming deco
                                                            ding function
   42 00000038         
   43 00000038 F04F 0500       MOV              r5, #0      ;
   44 0000003C         
   45 0000003C F1BC 0F00       CMP              r12, #0     ;
   46 00000040 D005            BEQ              loop3end    ;
   47 00000042         
   48 00000042 EA4F 06C6 
                       loop3   LSL              r6, #3      ;
   49 00000046 F105 0501       ADD              r5, r5, #1  ;
   50 0000004A 4565            CMP              r5, r12     ;
   51 0000004C DBF9            BLT              loop3       ;
   52 0000004E         



ARM Macro Assembler    Page 2 


   53 0000004E EA4B 0B06 
                       loop3end
                               ORR              r11, r6     ;
   54 00000052         
   55 00000052         
   56 00000052 F10C 0C01       ADD              r12, r12, #1 ;
   57 00000056 F1BC 0F0B       CMP              r12, #11    ;
   58 0000005A DBE1            BLT              loop2       ;
   59 0000005C         
   60 0000005C BC40            POP              {r6}
   61 0000005E         
   62 0000005E 465F            MOV              r7, r11     ;
   63 00000060 4690            MOV              r8, r2      ;
   64 00000062 F000 F817       BL               d_proc      ; Call Decryption f
                                                            unction
   65 00000066 4642            MOV              r2, r8      ;
   66 00000068         
   67 00000068         
   68 00000068 4603            MOV              r3, r0      ;
   69 0000006A 42B0            CMP              r0, r6      ;
   70 0000006C F04F 0000       MOV              r0, #0      ;
   71 00000070 BF08 2001       MOVEQ            r0, #1      ;
   72 00000074 F7FF FFFE       BL               printMsg    ;
   73 00000078 4618            MOV              r0, r3      ;
   74 0000007A         
   75 0000007A B440            PUSH             {R6}
   76 0000007C         
   77 0000007C F100 0001       ADD              r0, r0, #1  ;
   78 00000080 F5B0 7F7A       CMP              r0, #1000   ;
   79 00000084 DBC2            BLT              loop        ;
   80 00000086         
   81 00000086 E7FE    stop    B                stop        ; stop program
   82 00000088                 ENDFUNC
   83 00000088         
   84 00000088         ; Encryptor
   85 00000088         ; R8 = IV
   86 00000088         ; R7 = Input
   87 00000088         ; R6 = Output
   88 00000088 EA87 0608 
                       e_proc  EOR              r6, r7, r8
   89 0000008C EA4F 2636       ROR              r6, #8      ; CBC
   90 00000090 46B0            MOV              r8, r6      ; update IV
   91 00000092 4770            BX               lr
   92 00000094         
   93 00000094         ; Decryptor
   94 00000094         ; R8 = IV
   95 00000094         ; R7 = Input
   96 00000094         ; R6 = Output
   97 00000094 4646    d_proc  MOV              r6, r8      ; update IV
   98 00000096 46B8            MOV              r8, r7
   99 00000098 EA4F 6737       ROR              r7, #24
  100 0000009C EA86 0607       EOR              r6, r6, r7  ; CBC 
  101 000000A0 4770            BX               lr
  102 000000A2         
  103 000000A2         ; Encoding hamming  
  104 000000A2         ; R7 = Input
  105 000000A2         ; R6 = Output   
  106 000000A2 EA4F 0897 
                       e_hamm  MOV              R8, R7 , LSR #2 ;Load data



ARM Macro Assembler    Page 3 


  107 000000A6 F008 0801       AND              R8, R8,#1
  108 000000AA EA4F 0957       MOV              R9, R7 , LSR #1 ;Load data
  109 000000AE F009 0901       AND              R9, R9,#1
  110 000000B2 46BA            MOV              R10, R7
  111 000000B4 F00A 0A01       AND              R10, R10,#1
  112 000000B8         
  113 000000B8 EA88 0309       EOR              R3, R8, R9  ;C1
  114 000000BC EA88 040A       EOR              R4, R8, R10 ;C2
  115 000000C0 EA89 050A       EOR              R5, R9, R10 ;C3
  116 000000C4         
  117 000000C4 EA4F 1643       MOV              R6, R3, LSL #5 
                                                            ; R8 = R9 * 2 ^ 3
  118 000000C8 EB06 1604       ADD              R6, R6, R4, LSL #4 ; R8 = R8 + 
                                                            R9 * 2^2
  119 000000CC EB06 06C8       ADD              R6, R6, R8, LSL #3 ; R8 = R8 + 
                                                            R9 * 2^2
  120 000000D0 EB06 0685       ADD              R6, R6, R5, LSL #2 ; R8 = R8 + 
                                                            R9 * 2^2
  121 000000D4 EB06 0649       ADD              R6, R6, R9, LSL #1 ; R8 = R8 + 
                                                            R9 * 2^2
  122 000000D8 EB06 060A       ADD              R6, R6, R10, LSL #0 ; R8 = R8 +
                                                             R9 * 2^2
  123 000000DC 4770            BX               lr
  124 000000DE         
  125 000000DE         
  126 000000DE         ; Decoding hamming    
  127 000000DE         ; R5 = Inp
  128 000000DE         ; R6 = Output
  129 000000DE         d_hamm                               ; const
  130 000000DE F04F 0800       MOV              r8, #0      ;
  131 000000E2         
  132 000000E2         ; Parity 1
  133 000000E2 462E            MOV              r6, r5      ;
  134 000000E4 462F            MOV              r7, r5      ;
  135 000000E6 EA4F 06F6       ROR              r6, #3      ;
  136 000000EA EA4F 0777       ROR              r7, #1      ;
  137 000000EE F006 0601       AND              r6, #1      ;
  138 000000F2 F007 0701       AND              r7, #1      ;
  139 000000F6 EA86 0607       EOR              r6, r6, r7  ;
  140 000000FA 462F            MOV              r7, r5      ;
  141 000000FC EA4F 1777       ROR              r7, #5      ;
  142 00000100 F007 0701       AND              r7, #1      ;
  143 00000104 EA86 0607       EOR              r6, r6, r7  ;
  144 00000108 44B0            ADD              r8, r8, r6  ;
  145 0000010A         
  146 0000010A         ; Parity 2
  147 0000010A 462E            MOV              r6, r5      ;
  148 0000010C 462F            MOV              r7, r5      ;
  149 0000010E EA4F 06F6       ROR              r6, #3      ;
  150 00000112 F006 0601       AND              r6, #1      ;
  151 00000116 F007 0701       AND              r7, #1      ;
  152 0000011A EA86 0607       EOR              r6, r6, r7  ;
  153 0000011E 462F            MOV              r7, r5      ;
  154 00000120 EA4F 1737       ROR              r7, #4      ;
  155 00000124 F007 0701       AND              r7, #1      ;
  156 00000128 EA86 0607       EOR              r6, r6, r7  ;
  157 0000012C 44B0            ADD              r8, r8, r6  ;
  158 0000012E 44B0            ADD              r8, r8, r6  ;
  159 00000130         



ARM Macro Assembler    Page 4 


  160 00000130         ; Parity 3
  161 00000130 462E            MOV              r6, r5      ;
  162 00000132 462F            MOV              r7, r5      ;
  163 00000134 EA4F 0676       ROR              r6, #1      ;
  164 00000138 F006 0601       AND              r6, #1      ;
  165 0000013C F007 0701       AND              r7, #1      ;
  166 00000140 EA86 0607       EOR              r6, r6, r7  ;
  167 00000144 462F            MOV              r7, r5      ;
  168 00000146 EA4F 07B7       ROR              r7, #2      ;
  169 0000014A F007 0701       AND              r7, #1      ;
  170 0000014E EA86 0607       EOR              r6, r6, r7  ;
  171 00000152 44B0            ADD              r8, r8, r6  ;
  172 00000154 44B0            ADD              r8, r8, r6  ;
  173 00000156 44B0            ADD              r8, r8, r6  ;
  174 00000158 44B0            ADD              r8, r8, r6  ;
  175 0000015A         
  176 0000015A         ; check if any errors and correct
  177 0000015A         
  178 0000015A 462F            MOV              r7, r5      ;
  179 0000015C         
  180 0000015C F1B8 0F00       CMP              r8, #0      ;
  181 00000160 D009            BEQ              done
  182 00000162         
  183 00000162 F04F 0606       MOV              r6, #6      ;
  184 00000166 EBA6 0808       SUB              r8, r6 , r8
  185 0000016A F04F 0601       MOV              r6, #1      ;
  186 0000016E FA06 F608       LSL              r6, r8      ;
  187 00000172 EA87 0706       EOR              r7, r7, r6  ;
  188 00000176         
  189 00000176 463E    done    MOV              r6, r7      ;
  190 00000178 F006 0603       AND              r6, #3      ;
  191 0000017C EA4F 0757       LSR              r7, #1      ;
  192 00000180 F007 0704       AND              r7, #4      ;
  193 00000184 EA46 0607       ORR              r6, r7      ;
  194 00000188         
  195 00000188 4770            BX               lr
  196 0000018A         
  197 0000018A                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\floating_point.d -o.\objects\floating_point.o -I.\RTE
\_Target_1 -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Keil_v5\ARM
\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__EVAL SETA 1" --
predefine="__UVISION_VERSION SETA 525" --predefine="_RTE_ SETA 1" --predefine="
TM4C123GH6PM SETA 1" --list=.\listings\floating_point.lst floating_point.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

__main 00000000

Symbol: __main
   Definitions
      At line 8 in file floating_point.s
   Uses
      At line 4 in file floating_point.s
Comment: __main used once
appcode 00000000

Symbol: appcode
   Definitions
      At line 2 in file floating_point.s
   Uses
      None
Comment: appcode unused
d_hamm 000000DE

Symbol: d_hamm
   Definitions
      At line 129 in file floating_point.s
   Uses
      At line 41 in file floating_point.s
Comment: d_hamm used once
d_proc 00000094

Symbol: d_proc
   Definitions
      At line 97 in file floating_point.s
   Uses
      At line 64 in file floating_point.s
Comment: d_proc used once
done 00000176

Symbol: done
   Definitions
      At line 189 in file floating_point.s
   Uses
      At line 181 in file floating_point.s
Comment: done used once
e_hamm 000000A2

Symbol: e_hamm
   Definitions
      At line 106 in file floating_point.s
   Uses
      At line 35 in file floating_point.s
Comment: e_hamm used once
e_proc 00000088

Symbol: e_proc
   Definitions
      At line 88 in file floating_point.s
   Uses
      At line 23 in file floating_point.s
Comment: e_proc used once
loop 0000000C

Symbol: loop



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 21 in file floating_point.s
   Uses
      At line 79 in file floating_point.s
Comment: loop used once
loop2 00000020

Symbol: loop2
   Definitions
      At line 30 in file floating_point.s
   Uses
      At line 58 in file floating_point.s
Comment: loop2 used once
loop3 00000042

Symbol: loop3
   Definitions
      At line 48 in file floating_point.s
   Uses
      At line 51 in file floating_point.s
Comment: loop3 used once
loop3end 0000004E

Symbol: loop3end
   Definitions
      At line 53 in file floating_point.s
   Uses
      At line 46 in file floating_point.s
Comment: loop3end used once
stop 00000086

Symbol: stop
   Definitions
      At line 81 in file floating_point.s
   Uses
      At line 81 in file floating_point.s
Comment: stop used once
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

printMsg 00000000

Symbol: printMsg
   Definitions
      At line 3 in file floating_point.s
   Uses
      At line 72 in file floating_point.s
Comment: printMsg used once
1 symbol
348 symbols in table
