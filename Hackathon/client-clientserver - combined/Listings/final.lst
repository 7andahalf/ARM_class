


ARM Macro Assembler    Page 1 


    1 00000000         ; Combined Client - Server code
    2 00000000         ; Sends numbers from 0 to 999 and stores the output in m
                       emory
    3 00000000         
    4 00000000         
    5 00000000                 AREA             appcode, CODE, READONLY
    6 00000000                 EXPORT           __main
    7 00000000                 ENTRY
    8 00000000         
    9 00000000         
   10 00000000         __main  FUNCTION
   11 00000000         
   12 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; CLIENT
   13 00000000         ;; DATA: 0 to 1000
   14 00000000 F04F 0000       MOV              r0, #0      ; counter - data so
                                                            urce
   15 00000004         
   16 00000004         ;;;;;;;;;; ENCRYPTION
   17 00000004         
   18 00000004         ;; init
   19 00000004 F04F 3111       MOV              r1, #0x11111111 ; init IV for c
                                                            lient 
   20 00000008 F04F 3211       MOV              r2, #0x11111111 ; init IV for s
                                                            erver
   21 0000000C         
   22 0000000C         ;; loop
   23 0000000C 4688    loop    MOV              r8, r1      ;
   24 0000000E 4607            MOV              r7, r0      ; in
   25 00000010 F000 F838       BL               e_proc      ; Call Encryption f
                                                            unction
   26 00000014 4641            MOV              r1, r8      ;
   27 00000016         
   28 00000016 F04F 0B00       MOV              r11, #0     ;
   29 0000001A F04F 0C00       MOV              r12, #0     ;
   30 0000001E B440            PUSH             {r6}
   31 00000020         
   32 00000020 BC40    loop2   POP              {r6}
   33 00000022 4637            MOV              r7, r6      ;
   34 00000024 EA4F 06D6       LSR              r6, #3      ;
   35 00000028 B440            PUSH             {r6}
   36 0000002A F007 0707       AND              r7, #7      ;
   37 0000002E F000 F836       BL               e_hamm      ; Call Hamming enco
                                                            ding function
   38 00000032         
   39 00000032         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; SERVER
   40 00000032         
   41 00000032         ;;;;;;;;;; DECRYPTION
   42 00000032 4635            MOV              r5, r6      ;
   43 00000034 F000 F851       BL               d_hamm      ; Call Hamming deco
                                                            ding function
   44 00000038         
   45 00000038 F04F 0500       MOV              r5, #0      ;
   46 0000003C         
   47 0000003C F1BC 0F00       CMP              r12, #0     ;
   48 00000040 D005            BEQ              loop3end    ;
   49 00000042         
   50 00000042 EA4F 06C6 
                       loop3   LSL              r6, #3      ;
   51 00000046 F105 0501       ADD              r5, r5, #1  ;



ARM Macro Assembler    Page 2 


   52 0000004A 4565            CMP              r5, r12     ;
   53 0000004C DBF9            BLT              loop3       ;
   54 0000004E         
   55 0000004E EA4B 0B06 
                       loop3end
                               ORR              r11, r6     ;
   56 00000052         
   57 00000052         
   58 00000052 F10C 0C01       ADD              r12, r12, #1 ;
   59 00000056 F1BC 0F0B       CMP              r12, #11    ;
   60 0000005A DBE1            BLT              loop2       ;
   61 0000005C         
   62 0000005C BC40            POP              {r6}
   63 0000005E         
   64 0000005E 465F            MOV              r7, r11     ;
   65 00000060 4690            MOV              r8, r2      ;
   66 00000062 F000 F815       BL               d_proc      ; Call Decryption f
                                                            unction
   67 00000066 4642            MOV              r2, r8      ;
   68 00000068         
   69 00000068         
   70 00000068 4603            MOV              r3, r0      ;
   71 0000006A 42B0            CMP              r0, r6      ;
   72 0000006C F04F 0000       MOV              r0, #0      ;
   73 00000070 BF08 2001       MOVEQ            r0, #1      ;
   74 00000074         ;BL printMsg;
   75 00000074 4618            MOV              r0, r3      ;
   76 00000076         
   77 00000076 B440            PUSH             {R6}
   78 00000078         
   79 00000078 F100 0001       ADD              r0, r0, #1  ;
   80 0000007C F5B0 7F7A       CMP              r0, #1000   ;
   81 00000080 DBC4            BLT              loop        ;
   82 00000082         
   83 00000082 E7FE    stop    B                stop        ; stop program
   84 00000084                 ENDFUNC
   85 00000084         
   86 00000084         ; Encryptor
   87 00000084         ; R8 = IV
   88 00000084         ; R7 = Input
   89 00000084         ; R6 = Output
   90 00000084 EA87 0608 
                       e_proc  EOR              r6, r7, r8
   91 00000088 EA4F 2636       ROR              r6, #8      ; CBC
   92 0000008C 46B0            MOV              r8, r6      ; update IV
   93 0000008E 4770            BX               lr
   94 00000090         
   95 00000090         ; Decryptor
   96 00000090         ; R8 = IV
   97 00000090         ; R7 = Input
   98 00000090         ; R6 = Output
   99 00000090 4646    d_proc  MOV              r6, r8      ; update IV
  100 00000092 46B8            MOV              r8, r7
  101 00000094 EA4F 6737       ROR              r7, #24
  102 00000098 EA86 0607       EOR              r6, r6, r7  ; CBC 
  103 0000009C 4770            BX               lr
  104 0000009E         
  105 0000009E         ; Encoding hamming  
  106 0000009E         ; R7 = Input



ARM Macro Assembler    Page 3 


  107 0000009E         ; R6 = Output   
  108 0000009E EA4F 0897 
                       e_hamm  MOV              R8, R7 , LSR #2 ;Load data
  109 000000A2 F008 0801       AND              R8, R8,#1
  110 000000A6 EA4F 0957       MOV              R9, R7 , LSR #1 ;Load data
  111 000000AA F009 0901       AND              R9, R9,#1
  112 000000AE 46BA            MOV              R10, R7
  113 000000B0 F00A 0A01       AND              R10, R10,#1
  114 000000B4         
  115 000000B4 EA88 0309       EOR              R3, R8, R9  ;C1
  116 000000B8 EA88 040A       EOR              R4, R8, R10 ;C2
  117 000000BC EA89 050A       EOR              R5, R9, R10 ;C3
  118 000000C0         
  119 000000C0 EA4F 1643       MOV              R6, R3, LSL #5 
                                                            ; R8 = R9 * 2 ^ 3
  120 000000C4 EB06 1604       ADD              R6, R6, R4, LSL #4 ; R8 = R8 + 
                                                            R9 * 2^2
  121 000000C8 EB06 06C8       ADD              R6, R6, R8, LSL #3 ; R8 = R8 + 
                                                            R9 * 2^2
  122 000000CC EB06 0685       ADD              R6, R6, R5, LSL #2 ; R8 = R8 + 
                                                            R9 * 2^2
  123 000000D0 EB06 0649       ADD              R6, R6, R9, LSL #1 ; R8 = R8 + 
                                                            R9 * 2^2
  124 000000D4 EB06 060A       ADD              R6, R6, R10, LSL #0 ; R8 = R8 +
                                                             R9 * 2^2
  125 000000D8 4770            BX               lr
  126 000000DA         
  127 000000DA         
  128 000000DA         ; Decoding hamming    
  129 000000DA         ; R5 = Inp
  130 000000DA         ; R6 = Output
  131 000000DA         d_hamm                               ; const
  132 000000DA F04F 0800       MOV              r8, #0      ;
  133 000000DE         
  134 000000DE         ; Parity 1
  135 000000DE 462E            MOV              r6, r5      ;
  136 000000E0 462F            MOV              r7, r5      ;
  137 000000E2 EA4F 06F6       ROR              r6, #3      ;
  138 000000E6 EA4F 0777       ROR              r7, #1      ;
  139 000000EA F006 0601       AND              r6, #1      ;
  140 000000EE F007 0701       AND              r7, #1      ;
  141 000000F2 EA86 0607       EOR              r6, r6, r7  ;
  142 000000F6 462F            MOV              r7, r5      ;
  143 000000F8 EA4F 1777       ROR              r7, #5      ;
  144 000000FC F007 0701       AND              r7, #1      ;
  145 00000100 EA86 0607       EOR              r6, r6, r7  ;
  146 00000104 44B0            ADD              r8, r8, r6  ;
  147 00000106         
  148 00000106         ; Parity 2
  149 00000106 462E            MOV              r6, r5      ;
  150 00000108 462F            MOV              r7, r5      ;
  151 0000010A EA4F 06F6       ROR              r6, #3      ;
  152 0000010E F006 0601       AND              r6, #1      ;
  153 00000112 F007 0701       AND              r7, #1      ;
  154 00000116 EA86 0607       EOR              r6, r6, r7  ;
  155 0000011A 462F            MOV              r7, r5      ;
  156 0000011C EA4F 1737       ROR              r7, #4      ;
  157 00000120 F007 0701       AND              r7, #1      ;
  158 00000124 EA86 0607       EOR              r6, r6, r7  ;



ARM Macro Assembler    Page 4 


  159 00000128 44B0            ADD              r8, r8, r6  ;
  160 0000012A 44B0            ADD              r8, r8, r6  ;
  161 0000012C         
  162 0000012C         ; Parity 3
  163 0000012C 462E            MOV              r6, r5      ;
  164 0000012E 462F            MOV              r7, r5      ;
  165 00000130 EA4F 0676       ROR              r6, #1      ;
  166 00000134 F006 0601       AND              r6, #1      ;
  167 00000138 F007 0701       AND              r7, #1      ;
  168 0000013C EA86 0607       EOR              r6, r6, r7  ;
  169 00000140 462F            MOV              r7, r5      ;
  170 00000142 EA4F 07B7       ROR              r7, #2      ;
  171 00000146 F007 0701       AND              r7, #1      ;
  172 0000014A EA86 0607       EOR              r6, r6, r7  ;
  173 0000014E 44B0            ADD              r8, r8, r6  ;
  174 00000150 44B0            ADD              r8, r8, r6  ;
  175 00000152 44B0            ADD              r8, r8, r6  ;
  176 00000154 44B0            ADD              r8, r8, r6  ;
  177 00000156         
  178 00000156         ; check if any errors and correct
  179 00000156         
  180 00000156 462F            MOV              r7, r5      ;
  181 00000158         
  182 00000158 F1B8 0F00       CMP              r8, #0      ;
  183 0000015C D009            BEQ              done
  184 0000015E         
  185 0000015E F04F 0606       MOV              r6, #6      ;
  186 00000162 EBA6 0808       SUB              r8, r6 , r8
  187 00000166 F04F 0601       MOV              r6, #1      ;
  188 0000016A FA06 F608       LSL              r6, r8      ;
  189 0000016E EA87 0706       EOR              r7, r7, r6  ;
  190 00000172         
  191 00000172 463E    done    MOV              r6, r7      ;
  192 00000174 F006 0603       AND              r6, #3      ;
  193 00000178 EA4F 0757       LSR              r7, #1      ;
  194 0000017C F007 0704       AND              r7, #4      ;
  195 00000180 EA46 0607       ORR              r6, r7      ;
  196 00000184         
  197 00000184 4770            BX               lr
  198 00000186         
  199 00000186                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\final.d -o.\objects\final.o -I.\RTE\_Target_1 -ID:\Ke
il_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.
3.0\Device\ARM\ARMCM4\Include --predefine="__EVAL SETA 1" --predefine="__UVISIO
N_VERSION SETA 525" --predefine="_RTE_ SETA 1" --predefine="ARMCM4_FP SETA 1" -
-list=.\listings\final.lst final.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

__main 00000000

Symbol: __main
   Definitions
      At line 10 in file final.s
   Uses
      At line 6 in file final.s
Comment: __main used once
appcode 00000000

Symbol: appcode
   Definitions
      At line 5 in file final.s
   Uses
      None
Comment: appcode unused
d_hamm 000000DA

Symbol: d_hamm
   Definitions
      At line 131 in file final.s
   Uses
      At line 43 in file final.s
Comment: d_hamm used once
d_proc 00000090

Symbol: d_proc
   Definitions
      At line 99 in file final.s
   Uses
      At line 66 in file final.s
Comment: d_proc used once
done 00000172

Symbol: done
   Definitions
      At line 191 in file final.s
   Uses
      At line 183 in file final.s
Comment: done used once
e_hamm 0000009E

Symbol: e_hamm
   Definitions
      At line 108 in file final.s
   Uses
      At line 37 in file final.s
Comment: e_hamm used once
e_proc 00000084

Symbol: e_proc
   Definitions
      At line 90 in file final.s
   Uses
      At line 25 in file final.s
Comment: e_proc used once
loop 0000000C

Symbol: loop



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 23 in file final.s
   Uses
      At line 81 in file final.s
Comment: loop used once
loop2 00000020

Symbol: loop2
   Definitions
      At line 32 in file final.s
   Uses
      At line 60 in file final.s
Comment: loop2 used once
loop3 00000042

Symbol: loop3
   Definitions
      At line 50 in file final.s
   Uses
      At line 53 in file final.s
Comment: loop3 used once
loop3end 0000004E

Symbol: loop3end
   Definitions
      At line 55 in file final.s
   Uses
      At line 48 in file final.s
Comment: loop3end used once
stop 00000082

Symbol: stop
   Definitions
      At line 83 in file final.s
   Uses
      At line 83 in file final.s
Comment: stop used once
12 symbols
347 symbols in table
